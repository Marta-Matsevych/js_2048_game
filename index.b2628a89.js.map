{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = this.move(0, -1);\n                if (moved) {\n                    this.addRandomTile();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var moved = this.move(0, 1);\n                if (moved) {\n                    this.addRandomTile();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var moved = this.move(-1, 0);\n                if (moved) {\n                    this.addRandomTile();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var moved = this.move(1, 0);\n                if (moved) {\n                    this.addRandomTile();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"move\",\n            value: function move(rowDelta, colDelta) {\n                var _this = this;\n                var moved = false;\n                var merged = [];\n                var inBounds = function(r, c) {\n                    return r >= 0 && r < 4 && c >= 0 && c < 4;\n                };\n                var traverse = function() {\n                    var rows = [\n                        0,\n                        1,\n                        2,\n                        3\n                    ];\n                    var cols = [\n                        0,\n                        1,\n                        2,\n                        3\n                    ];\n                    if (rowDelta === 1) rows.reverse();\n                     // down\n                    if (colDelta === 1) cols.reverse();\n                     // right\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                    try {\n                        for(var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n                            var r = _step.value;\n                            try {\n                                for(var _iterator1 = cols[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){\n                                    var c = _step1.value;\n                                    var current = _this.board[r][c];\n                                    if (current === 0) continue;\n                                    var nr = r;\n                                    var nc = c;\n                                    while(inBounds(nr + rowDelta, nc + colDelta) && _this.board[nr + rowDelta][nc + colDelta] === 0){\n                                        nr += rowDelta;\n                                        nc += colDelta;\n                                    }\n                                    if (inBounds(nr + rowDelta, nc + colDelta) && _this.board[nr + rowDelta][nc + colDelta] === current && !merged.includes(\"\".concat(nr + rowDelta, \"-\").concat(nc + colDelta))) {\n                                        _this.board[nr + rowDelta][nc + colDelta] *= 2;\n                                        _this.board[r][c] = 0;\n                                        merged.push(\"\".concat(nr + rowDelta, \"-\").concat(nc + colDelta));\n                                        _this.score += _this.board[nr + rowDelta][nc + colDelta];\n                                        moved = true;\n                                    } else if (nr !== r || nc !== c) {\n                                        _this.board[nr][nc] = current;\n                                        _this.board[r][c] = 0;\n                                        moved = true;\n                                    }\n                                }\n                            } catch (err) {\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                            } finally{\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                                        _iterator1.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError1 = true;\n                        _iteratorError1 = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError1) {\n                                throw _iteratorError1;\n                            }\n                        }\n                    }\n                };\n                traverse();\n                return moved;\n            }\n        },\n        {\n            // Adds a new tile (2 or 4) to a random empty cell\n            key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                for(var r = 0; r < 4; r++){\n                    for(var c = 0; c < 4; c++)if (this.board[r][c] === 0) emptyCells.push([\n                        r,\n                        c\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), r1 = _emptyCells_Math_floor[0], c1 = _emptyCells_Math_floor[1];\n                    this.board[r1][c1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            // Check if the player has won or lost\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.board.some(function(row) {\n                    return row.includes(2048);\n                })) this.status = \"win\";\n                else if (!this.canMove()) this.status = \"lose\";\n            }\n        },\n        {\n            // Check if any moves are possible\n            key: \"canMove\",\n            value: function canMove() {\n                for(var r = 0; r < 4; r++)for(var c = 0; c < 4; c++){\n                    if (this.board[r][c] === 0) return true;\n                     // Empty cell exists\n                    if (r < 3 && this.board[r][c] === this.board[r + 1][c]) return true;\n                     // Can merge down\n                    if (c < 3 && this.board[r][c] === this.board[r][c + 1]) return true;\n                     // Can merge right\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\ndocument.addEventListener(\"keydown\", $197cd56b15c33885$var$handleKeydown);\ndocument.querySelector(\".start\").addEventListener(\"click\", $197cd56b15c33885$var$startGame);\nfunction $197cd56b15c33885$var$startGame() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$updateScore();\n    $197cd56b15c33885$var$updateMessage(\"start\");\n    document.querySelector(\".start\").classList.remove(\"start\");\n    document.querySelector(\".button\").classList.add(\"restart\");\n    document.querySelector(\".button\").innerText = \"Restart\";\n}\n// eslint-disable-next-line no-shadow\nfunction $197cd56b15c33885$var$handleKeydown(event) {\n    if ($197cd56b15c33885$var$game.getStatus() !== \"playing\") return;\n    switch(event.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n    }\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$updateScore();\n    if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$updateMessage(\"win\");\n    else if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$updateMessage(\"lose\");\n}\nfunction $197cd56b15c33885$var$renderBoard() {\n    var board = $197cd56b15c33885$var$game.getState();\n    var cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach(function(cell, index) {\n        var row = Math.floor(index / 4);\n        var col = index % 4;\n        var value = board[row][col];\n        cell.innerText = value === 0 ? \"\" : value;\n        cell.className = \"field-cell \".concat(value ? \"field-cell--\".concat(value) : \"\");\n    });\n}\nfunction $197cd56b15c33885$var$updateScore() {\n    document.querySelector(\".game-score\").innerText = $197cd56b15c33885$var$game.getScore();\n}\n// eslint-disable-next-line no-shadow\nfunction $197cd56b15c33885$var$updateMessage(status) {\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    if (status === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (status === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n\n})();\n//# sourceMappingURL=index.b2628a89.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ndocument.addEventListener('keydown', handleKeydown);\ndocument.querySelector('.start').addEventListener('click', startGame);\n\nfunction startGame() {\n  game.restart();\n  renderBoard();\n  updateScore();\n  updateMessage('start');\n  document.querySelector('.start').classList.remove('start');\n  document.querySelector('.button').classList.add('restart');\n  document.querySelector('.button').innerText = 'Restart';\n}\n\n// eslint-disable-next-line no-shadow\nfunction handleKeydown(event) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  renderBoard();\n  updateScore();\n\n  if (game.getStatus() === 'win') {\n    updateMessage('win');\n  } else if (game.getStatus() === 'lose') {\n    updateMessage('lose');\n  }\n}\n\nfunction renderBoard() {\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.innerText = value === 0 ? '' : value;\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n}\n\nfunction updateScore() {\n  document.querySelector('.game-score').innerText = game.getScore();\n}\n\n// eslint-disable-next-line no-shadow\nfunction updateMessage(status) {\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n\n  if (status === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (status === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  moveLeft() {\n    const moved = this.move(0, -1);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveRight() {\n    const moved = this.move(0, 1);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveUp() {\n    const moved = this.move(-1, 0);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveDown() {\n    const moved = this.move(1, 0);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Add your own methods here\n  move(rowDelta, colDelta) {\n    let moved = false;\n    const merged = [];\n\n    const inBounds = (r, c) => r >= 0 && r < 4 && c >= 0 && c < 4;\n\n    const traverse = () => {\n      const rows = [0, 1, 2, 3];\n      const cols = [0, 1, 2, 3];\n\n      if (rowDelta === 1) {\n        rows.reverse();\n      } // down\n\n      if (colDelta === 1) {\n        cols.reverse();\n      } // right\n\n      for (const r of rows) {\n        for (const c of cols) {\n          const current = this.board[r][c];\n\n          if (current === 0) {\n            continue;\n          }\n\n          let nr = r;\n          let nc = c;\n\n          while (\n            inBounds(nr + rowDelta, nc + colDelta) &&\n            this.board[nr + rowDelta][nc + colDelta] === 0\n          ) {\n            nr += rowDelta;\n            nc += colDelta;\n          }\n\n          if (\n            inBounds(nr + rowDelta, nc + colDelta) &&\n            this.board[nr + rowDelta][nc + colDelta] === current &&\n            !merged.includes(`${nr + rowDelta}-${nc + colDelta}`)\n          ) {\n            this.board[nr + rowDelta][nc + colDelta] *= 2;\n            this.board[r][c] = 0;\n            merged.push(`${nr + rowDelta}-${nc + colDelta}`);\n            this.score += this.board[nr + rowDelta][nc + colDelta];\n            moved = true;\n          } else if (nr !== r || nc !== c) {\n            this.board[nr][nc] = current;\n            this.board[r][c] = 0;\n            moved = true;\n          }\n        }\n      }\n    };\n\n    traverse();\n\n    return moved;\n  }\n\n  // Adds a new tile (2 or 4) to a random empty cell\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Check if the player has won or lost\n  checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  // Check if any moves are possible\n  canMove() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        } // Empty cell exists\n\n        if (r < 3 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        } // Can merge down\n\n        if (c < 3 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        } // Can merge right\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","board","score","status","addRandomTile","key","value","move","checkGameStatus","rowDelta","colDelta","_this","moved","merged","inBounds","r","c","traverse","rows","cols","reverse","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step","_iterator","Symbol","iterator","next","done","_step1","_iterator1","current","nr","nc","includes","concat","push","err","return","emptyCells","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","_arr","_n","_d","call","o","minLen","n","Object","prototype","toString","slice","constructor","name","from","test","r1","c1","some","row","canMove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$renderBoard","getState","cells","document","querySelectorAll","forEach","cell","index","innerText","className","$197cd56b15c33885$var$updateScore","querySelector","getScore","$197cd56b15c33885$var$updateMessage","classList","add","remove","addEventListener","event","getStatus","moveUp","moveDown","moveLeft","moveRight","restart"],"version":3,"file":"index.b2628a89.js.map"}