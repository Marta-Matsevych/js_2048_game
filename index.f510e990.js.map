{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    moveLeft() {\n        const moved = this.move(0, -1);\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveRight() {\n        const moved = this.move(0, 1);\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveUp() {\n        const moved = this.move(-1, 0);\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveDown() {\n        const moved = this.move(1, 0);\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    // Add your own methods here\n    move(rowDelta, colDelta) {\n        let moved = false;\n        const merged = [];\n        const inBounds = (r, c)=>r >= 0 && r < 4 && c >= 0 && c < 4;\n        const traverse = ()=>{\n            const rows = [\n                0,\n                1,\n                2,\n                3\n            ];\n            const cols = [\n                0,\n                1,\n                2,\n                3\n            ];\n            if (rowDelta === 1) rows.reverse();\n             // down\n            if (colDelta === 1) cols.reverse();\n             // right\n            for (const r of rows)for (const c of cols){\n                const current = this.board[r][c];\n                if (current === 0) continue;\n                let nr = r;\n                let nc = c;\n                while(inBounds(nr + rowDelta, nc + colDelta) && this.board[nr + rowDelta][nc + colDelta] === 0){\n                    nr += rowDelta;\n                    nc += colDelta;\n                }\n                if (inBounds(nr + rowDelta, nc + colDelta) && this.board[nr + rowDelta][nc + colDelta] === current && !merged.includes(`${nr + rowDelta}-${nc + colDelta}`)) {\n                    this.board[nr + rowDelta][nc + colDelta] *= 2;\n                    this.board[r][c] = 0;\n                    merged.push(`${nr + rowDelta}-${nc + colDelta}`);\n                    this.score += this.board[nr + rowDelta][nc + colDelta];\n                    moved = true;\n                } else if (nr !== r || nc !== c) {\n                    this.board[nr][nc] = current;\n                    this.board[r][c] = 0;\n                    moved = true;\n                }\n            }\n        };\n        traverse();\n        return moved;\n    }\n    // Adds a new tile (2 or 4) to a random empty cell\n    addRandomTile() {\n        const emptyCells = [];\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (this.board[r][c] === 0) emptyCells.push([\n                r,\n                c\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    // Check if the player has won or lost\n    checkGameStatus() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n        else if (!this.canMove()) this.status = \"lose\";\n    }\n    // Check if any moves are possible\n    canMove() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.board[r][c] === 0) return true;\n             // Empty cell exists\n            if (r < 3 && this.board[r][c] === this.board[r + 1][c]) return true;\n             // Can merge down\n            if (c < 3 && this.board[r][c] === this.board[r][c + 1]) return true;\n             // Can merge right\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeydown);\ndocument.querySelector(\".start\").addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateMessage(\"start\");\n    document.querySelector(\".start\").classList.remove(\"start\");\n    document.querySelector(\".button\").classList.add(\"restart\");\n    document.querySelector(\".button\").innerText = \"Restart\";\n}\n// eslint-disable-next-line no-shadow\nfunction $09e991522ca7e64e$var$handleKeydown(event) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(event.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$renderBoard();\n    $09e991522ca7e64e$var$updateScore();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$updateMessage(\"win\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$updateMessage(\"lose\");\n}\nfunction $09e991522ca7e64e$var$renderBoard() {\n    const board = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    cells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        cell.innerText = value === 0 ? \"\" : value;\n        cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n    });\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    document.querySelector(\".game-score\").innerText = $09e991522ca7e64e$var$game.getScore();\n}\n// eslint-disable-next-line no-shadow\nfunction $09e991522ca7e64e$var$updateMessage(status) {\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    if (status === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (status === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.f510e990.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\ndocument.addEventListener('keydown', handleKeydown);\ndocument.querySelector('.start').addEventListener('click', startGame);\n\nfunction startGame() {\n  game.restart();\n  renderBoard();\n  updateScore();\n  updateMessage('start');\n  document.querySelector('.start').classList.remove('start');\n  document.querySelector('.button').classList.add('restart');\n  document.querySelector('.button').innerText = 'Restart';\n}\n\n// eslint-disable-next-line no-shadow\nfunction handleKeydown(event) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (event.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n\n  renderBoard();\n  updateScore();\n\n  if (game.getStatus() === 'win') {\n    updateMessage('win');\n  } else if (game.getStatus() === 'lose') {\n    updateMessage('lose');\n  }\n}\n\nfunction renderBoard() {\n  const board = game.getState();\n  const cells = document.querySelectorAll('.field-cell');\n\n  cells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    cell.innerText = value === 0 ? '' : value;\n    cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n  });\n}\n\nfunction updateScore() {\n  document.querySelector('.game-score').innerText = game.getScore();\n}\n\n// eslint-disable-next-line no-shadow\nfunction updateMessage(status) {\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n\n  if (status === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (status === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  moveLeft() {\n    const moved = this.move(0, -1);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveRight() {\n    const moved = this.move(0, 1);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveUp() {\n    const moved = this.move(-1, 0);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n  moveDown() {\n    const moved = this.move(1, 0);\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  // Add your own methods here\n  move(rowDelta, colDelta) {\n    let moved = false;\n    const merged = [];\n\n    const inBounds = (r, c) => r >= 0 && r < 4 && c >= 0 && c < 4;\n\n    const traverse = () => {\n      const rows = [0, 1, 2, 3];\n      const cols = [0, 1, 2, 3];\n\n      if (rowDelta === 1) {\n        rows.reverse();\n      } // down\n\n      if (colDelta === 1) {\n        cols.reverse();\n      } // right\n\n      for (const r of rows) {\n        for (const c of cols) {\n          const current = this.board[r][c];\n\n          if (current === 0) {\n            continue;\n          }\n\n          let nr = r;\n          let nc = c;\n\n          while (\n            inBounds(nr + rowDelta, nc + colDelta) &&\n            this.board[nr + rowDelta][nc + colDelta] === 0\n          ) {\n            nr += rowDelta;\n            nc += colDelta;\n          }\n\n          if (\n            inBounds(nr + rowDelta, nc + colDelta) &&\n            this.board[nr + rowDelta][nc + colDelta] === current &&\n            !merged.includes(`${nr + rowDelta}-${nc + colDelta}`)\n          ) {\n            this.board[nr + rowDelta][nc + colDelta] *= 2;\n            this.board[r][c] = 0;\n            merged.push(`${nr + rowDelta}-${nc + colDelta}`);\n            this.score += this.board[nr + rowDelta][nc + colDelta];\n            moved = true;\n          } else if (nr !== r || nc !== c) {\n            this.board[nr][nc] = current;\n            this.board[r][c] = 0;\n            moved = true;\n          }\n        }\n      }\n    };\n\n    traverse();\n\n    return moved;\n  }\n\n  // Adds a new tile (2 or 4) to a random empty cell\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          emptyCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [r, c] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  // Check if the player has won or lost\n  checkGameStatus() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    } else if (!this.canMove()) {\n      this.status = 'lose';\n    }\n  }\n\n  // Check if any moves are possible\n  canMove() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          return true;\n        } // Empty cell exists\n\n        if (r < 3 && this.board[r][c] === this.board[r + 1][c]) {\n          return true;\n        } // Can merge down\n\n        if (c < 3 && this.board[r][c] === this.board[r][c + 1]) {\n          return true;\n        } // Can merge right\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","addRandomTile","moveLeft","move","checkGameStatus","moveRight","moveUp","moveDown","getScore","getState","getStatus","start","restart","rowDelta","colDelta","moved","merged","inBounds","r","c","traverse","rows","cols","reverse","current","nr","nc","includes","push","emptyCells","length","Math","floor","random","some","row","canMove","$09e991522ca7e64e$var$renderBoard","cells","document","querySelectorAll","forEach","cell","index","value","innerText","className","$09e991522ca7e64e$var$updateScore","querySelector","$09e991522ca7e64e$var$updateMessage","classList","add","remove","addEventListener","event","key"],"version":3,"file":"index.f510e990.js.map"}